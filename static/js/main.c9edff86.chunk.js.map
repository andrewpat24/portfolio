{"version":3,"sources":["components/HeroComponent.js","App.js","serviceWorker.js","index.js"],"names":["HeroComponent","react_default","a","createElement","className","href","target","class","App","components_HeroComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA+CeA,MA5Cf,WAME,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gEACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCAAf,OACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAf,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8DAAf,sBAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2EACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAjBpB,0DAiBuCC,OAAO,UACpDL,EAAAC,EAAAC,cAAA,KAAGI,MAAM,sCAGbN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KArBtB,kCAqBuCC,OAAO,UAClDL,EAAAC,EAAAC,cAAA,KAAGI,MAAM,iCAGbN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAzBrB,sCAyBuCC,OAAO,UACnDL,EAAAC,EAAAC,cAAA,KAAGI,MAAM,sBAGbN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KA7BtB,+BA6BuCC,OAAO,UAClDL,EAAAC,EAAAC,cAAA,KAAGI,MAAM,wCC1BVC,MARf,WACE,OACEP,EAAAC,EAAAC,cAAA,WAASC,UAAU,OACjBH,EAAAC,EAAAC,cAACM,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c9edff86.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Hero.scss\";\n\nfunction HeroComponent() {\n  const linkedInUrl = \"https://www.linkedin.com/in/andrew-patterson-65a158110/\";\n  const githubUrl = \"https://github.com/andrewpat24/\";\n  const twitterUrl = \"https://twitter.com/AndrewCodesHere\";\n  const mailToUrl = \"mailto:andrewpat24@gmail.com\";\n\n  return (\n    <section className=\"HeroComponent\">\n      <div className=\"hero-container section horizontally-center vertically-center\">\n        <div className=\"hero has-text-centered \">\n          <div className=\"subtitle hero-subtitle has-text-light\">Hi,</div>\n          <div className=\"title hero-title has-text-light\">I'm Andrew.</div>\n          <div className=\"subtitle hero-position hero-subtitle has-text-light-orange\">\n            Software Developer\n          </div>\n\n          <div className=\"static-columns hero-contact-icons horizontally-center vertically-center\">\n            <div className=\"static-column\">\n              <a className=\"contact-icon\" href={linkedInUrl} target=\"_blank\">\n                <i class=\"fab fa-linkedin-in contact-icon\" />\n              </a>\n            </div>\n            <div className=\"static-column\">\n              <a className=\"contact-icon\" href={githubUrl} target=\"_blank\">\n                <i class=\"fab fa-github contact-icon\" />\n              </a>\n            </div>\n            <div className=\"static-column\">\n              <a className=\"contact-icon\" href={twitterUrl} target=\"_blank\">\n                <i class=\"fab fa-twitter \" />\n              </a>\n            </div>\n            <div className=\"static-column\">\n              <a className=\"contact-icon\" href={mailToUrl} target=\"_blank\">\n                <i class=\"far fa-envelope contact-icon\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default HeroComponent;\n","import React from \"react\";\nimport HeroComponent from \"./components/HeroComponent\";\n\nfunction App() {\n  return (\n    <section className=\"app\">\n      <HeroComponent />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}